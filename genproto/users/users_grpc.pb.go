// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: users.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	GetProfile(ctx context.Context, in *RequestGetProfile, opts ...grpc.CallOption) (*ResponseGetProfile, error)
	EditProfile(ctx context.Context, in *RequestEditProfile, opts ...grpc.CallOption) (*ResponseEditProfile, error)
	GetUsers(ctx context.Context, in *RequestGetUsers, opts ...grpc.CallOption) (*ResponseGetUsers, error)
	DeleteUser(ctx context.Context, in *RequestDeleteUser, opts ...grpc.CallOption) (*ResponseDeleteUser, error)
	UpdatePassword(ctx context.Context, in *RequestUpdatePassword, opts ...grpc.CallOption) (*ResponseUpdatePassword, error)
	GetUserStatistic(ctx context.Context, in *RequestGetUserStatistic, opts ...grpc.CallOption) (*ResponseGetUserStatistic, error)
	Follow(ctx context.Context, in *RequestFollow, opts ...grpc.CallOption) (*ResponseFollow, error)
	GetFollowers(ctx context.Context, in *RequestGetFollowers, opts ...grpc.CallOption) (*ResponseGetFollowers, error)
	ValidateUser(ctx context.Context, in *RequestGetProfile, opts ...grpc.CallOption) (*Status, error)
	GetAuthorInfo(ctx context.Context, in *RequestGetAuthorInfo, opts ...grpc.CallOption) (*ResponseGetAuthorInfo, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) GetProfile(ctx context.Context, in *RequestGetProfile, opts ...grpc.CallOption) (*ResponseGetProfile, error) {
	out := new(ResponseGetProfile)
	err := c.cc.Invoke(ctx, "/users.Users/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) EditProfile(ctx context.Context, in *RequestEditProfile, opts ...grpc.CallOption) (*ResponseEditProfile, error) {
	out := new(ResponseEditProfile)
	err := c.cc.Invoke(ctx, "/users.Users/EditProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsers(ctx context.Context, in *RequestGetUsers, opts ...grpc.CallOption) (*ResponseGetUsers, error) {
	out := new(ResponseGetUsers)
	err := c.cc.Invoke(ctx, "/users.Users/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteUser(ctx context.Context, in *RequestDeleteUser, opts ...grpc.CallOption) (*ResponseDeleteUser, error) {
	out := new(ResponseDeleteUser)
	err := c.cc.Invoke(ctx, "/users.Users/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdatePassword(ctx context.Context, in *RequestUpdatePassword, opts ...grpc.CallOption) (*ResponseUpdatePassword, error) {
	out := new(ResponseUpdatePassword)
	err := c.cc.Invoke(ctx, "/users.Users/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserStatistic(ctx context.Context, in *RequestGetUserStatistic, opts ...grpc.CallOption) (*ResponseGetUserStatistic, error) {
	out := new(ResponseGetUserStatistic)
	err := c.cc.Invoke(ctx, "/users.Users/GetUserStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Follow(ctx context.Context, in *RequestFollow, opts ...grpc.CallOption) (*ResponseFollow, error) {
	out := new(ResponseFollow)
	err := c.cc.Invoke(ctx, "/users.Users/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetFollowers(ctx context.Context, in *RequestGetFollowers, opts ...grpc.CallOption) (*ResponseGetFollowers, error) {
	out := new(ResponseGetFollowers)
	err := c.cc.Invoke(ctx, "/users.Users/GetFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ValidateUser(ctx context.Context, in *RequestGetProfile, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/users.Users/ValidateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetAuthorInfo(ctx context.Context, in *RequestGetAuthorInfo, opts ...grpc.CallOption) (*ResponseGetAuthorInfo, error) {
	out := new(ResponseGetAuthorInfo)
	err := c.cc.Invoke(ctx, "/users.Users/GetAuthorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	GetProfile(context.Context, *RequestGetProfile) (*ResponseGetProfile, error)
	EditProfile(context.Context, *RequestEditProfile) (*ResponseEditProfile, error)
	GetUsers(context.Context, *RequestGetUsers) (*ResponseGetUsers, error)
	DeleteUser(context.Context, *RequestDeleteUser) (*ResponseDeleteUser, error)
	UpdatePassword(context.Context, *RequestUpdatePassword) (*ResponseUpdatePassword, error)
	GetUserStatistic(context.Context, *RequestGetUserStatistic) (*ResponseGetUserStatistic, error)
	Follow(context.Context, *RequestFollow) (*ResponseFollow, error)
	GetFollowers(context.Context, *RequestGetFollowers) (*ResponseGetFollowers, error)
	ValidateUser(context.Context, *RequestGetProfile) (*Status, error)
	GetAuthorInfo(context.Context, *RequestGetAuthorInfo) (*ResponseGetAuthorInfo, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) GetProfile(context.Context, *RequestGetProfile) (*ResponseGetProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUsersServer) EditProfile(context.Context, *RequestEditProfile) (*ResponseEditProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProfile not implemented")
}
func (UnimplementedUsersServer) GetUsers(context.Context, *RequestGetUsers) (*ResponseGetUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersServer) DeleteUser(context.Context, *RequestDeleteUser) (*ResponseDeleteUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServer) UpdatePassword(context.Context, *RequestUpdatePassword) (*ResponseUpdatePassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUsersServer) GetUserStatistic(context.Context, *RequestGetUserStatistic) (*ResponseGetUserStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatistic not implemented")
}
func (UnimplementedUsersServer) Follow(context.Context, *RequestFollow) (*ResponseFollow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedUsersServer) GetFollowers(context.Context, *RequestGetFollowers) (*ResponseGetFollowers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedUsersServer) ValidateUser(context.Context, *RequestGetProfile) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUser not implemented")
}
func (UnimplementedUsersServer) GetAuthorInfo(context.Context, *RequestGetAuthorInfo) (*ResponseGetAuthorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorInfo not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetProfile(ctx, req.(*RequestGetProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_EditProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).EditProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/EditProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).EditProfile(ctx, req.(*RequestEditProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsers(ctx, req.(*RequestGetUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*RequestDeleteUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdatePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdatePassword(ctx, req.(*RequestUpdatePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUserStatistic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetUserStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserStatistic(ctx, req.(*RequestGetUserStatistic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFollow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Follow(ctx, req.(*RequestFollow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetFollowers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetFollowers(ctx, req.(*RequestGetFollowers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ValidateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ValidateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/ValidateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ValidateUser(ctx, req.(*RequestGetProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetAuthorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAuthorInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAuthorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetAuthorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAuthorInfo(ctx, req.(*RequestGetAuthorInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _Users_GetProfile_Handler,
		},
		{
			MethodName: "EditProfile",
			Handler:    _Users_EditProfile_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Users_GetUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Users_UpdatePassword_Handler,
		},
		{
			MethodName: "GetUserStatistic",
			Handler:    _Users_GetUserStatistic_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _Users_Follow_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _Users_GetFollowers_Handler,
		},
		{
			MethodName: "ValidateUser",
			Handler:    _Users_ValidateUser_Handler,
		},
		{
			MethodName: "GetAuthorInfo",
			Handler:    _Users_GetAuthorInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
