// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: interactions.proto

package interactions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InteractionsClient is the client API for Interactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionsClient interface {
	CreateComment(ctx context.Context, in *RequestCreateComment, opts ...grpc.CallOption) (*ResponseCreateComment, error)
	GetComments(ctx context.Context, in *RequestGetComments, opts ...grpc.CallOption) (*ResponseGetComments, error)
	LikeStory(ctx context.Context, in *RequestLikeStory, opts ...grpc.CallOption) (*ResponseLikeStory, error)
}

type interactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionsClient(cc grpc.ClientConnInterface) InteractionsClient {
	return &interactionsClient{cc}
}

func (c *interactionsClient) CreateComment(ctx context.Context, in *RequestCreateComment, opts ...grpc.CallOption) (*ResponseCreateComment, error) {
	out := new(ResponseCreateComment)
	err := c.cc.Invoke(ctx, "/interactions.interactions/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionsClient) GetComments(ctx context.Context, in *RequestGetComments, opts ...grpc.CallOption) (*ResponseGetComments, error) {
	out := new(ResponseGetComments)
	err := c.cc.Invoke(ctx, "/interactions.interactions/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionsClient) LikeStory(ctx context.Context, in *RequestLikeStory, opts ...grpc.CallOption) (*ResponseLikeStory, error) {
	out := new(ResponseLikeStory)
	err := c.cc.Invoke(ctx, "/interactions.interactions/LikeStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionsServer is the server API for Interactions service.
// All implementations must embed UnimplementedInteractionsServer
// for forward compatibility
type InteractionsServer interface {
	CreateComment(context.Context, *RequestCreateComment) (*ResponseCreateComment, error)
	GetComments(context.Context, *RequestGetComments) (*ResponseGetComments, error)
	LikeStory(context.Context, *RequestLikeStory) (*ResponseLikeStory, error)
	mustEmbedUnimplementedInteractionsServer()
}

// UnimplementedInteractionsServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionsServer struct {
}

func (UnimplementedInteractionsServer) CreateComment(context.Context, *RequestCreateComment) (*ResponseCreateComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedInteractionsServer) GetComments(context.Context, *RequestGetComments) (*ResponseGetComments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedInteractionsServer) LikeStory(context.Context, *RequestLikeStory) (*ResponseLikeStory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStory not implemented")
}
func (UnimplementedInteractionsServer) mustEmbedUnimplementedInteractionsServer() {}

// UnsafeInteractionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionsServer will
// result in compilation errors.
type UnsafeInteractionsServer interface {
	mustEmbedUnimplementedInteractionsServer()
}

func RegisterInteractionsServer(s grpc.ServiceRegistrar, srv InteractionsServer) {
	s.RegisterService(&Interactions_ServiceDesc, srv)
}

func _Interactions_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionsServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions.interactions/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionsServer).CreateComment(ctx, req.(*RequestCreateComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactions_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetComments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionsServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions.interactions/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionsServer).GetComments(ctx, req.(*RequestGetComments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interactions_LikeStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLikeStory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionsServer).LikeStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactions.interactions/LikeStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionsServer).LikeStory(ctx, req.(*RequestLikeStory))
	}
	return interceptor(ctx, in, info, handler)
}

// Interactions_ServiceDesc is the grpc.ServiceDesc for Interactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interactions.interactions",
	HandlerType: (*InteractionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _Interactions_CreateComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Interactions_GetComments_Handler,
		},
		{
			MethodName: "LikeStory",
			Handler:    _Interactions_LikeStory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interactions.proto",
}
