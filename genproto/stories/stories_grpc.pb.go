// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: stories.proto

package stories

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoriesClient is the client API for Stories service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoriesClient interface {
	CreateStory(ctx context.Context, in *RequestCreateStory, opts ...grpc.CallOption) (*ResponseCreateStory, error)
	EditStory(ctx context.Context, in *RequestEditStory, opts ...grpc.CallOption) (*ResponseEditStory, error)
	DeleteStory(ctx context.Context, in *RequestDeleteStory, opts ...grpc.CallOption) (*ResponseDeleteStory, error)
	GetStories(ctx context.Context, in *RequestGetStories, opts ...grpc.CallOption) (*ResponseGetStories, error)
	GetStoryFullInfo(ctx context.Context, in *RequestGetStoryFullInfo, opts ...grpc.CallOption) (*ResponseGetStoryFullInfo, error)
}

type storiesClient struct {
	cc grpc.ClientConnInterface
}

func NewStoriesClient(cc grpc.ClientConnInterface) StoriesClient {
	return &storiesClient{cc}
}

func (c *storiesClient) CreateStory(ctx context.Context, in *RequestCreateStory, opts ...grpc.CallOption) (*ResponseCreateStory, error) {
	out := new(ResponseCreateStory)
	err := c.cc.Invoke(ctx, "/stories.Stories/CreateStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesClient) EditStory(ctx context.Context, in *RequestEditStory, opts ...grpc.CallOption) (*ResponseEditStory, error) {
	out := new(ResponseEditStory)
	err := c.cc.Invoke(ctx, "/stories.Stories/EditStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesClient) DeleteStory(ctx context.Context, in *RequestDeleteStory, opts ...grpc.CallOption) (*ResponseDeleteStory, error) {
	out := new(ResponseDeleteStory)
	err := c.cc.Invoke(ctx, "/stories.Stories/DeleteStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesClient) GetStories(ctx context.Context, in *RequestGetStories, opts ...grpc.CallOption) (*ResponseGetStories, error) {
	out := new(ResponseGetStories)
	err := c.cc.Invoke(ctx, "/stories.Stories/GetStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesClient) GetStoryFullInfo(ctx context.Context, in *RequestGetStoryFullInfo, opts ...grpc.CallOption) (*ResponseGetStoryFullInfo, error) {
	out := new(ResponseGetStoryFullInfo)
	err := c.cc.Invoke(ctx, "/stories.Stories/GetStoryFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoriesServer is the server API for Stories service.
// All implementations must embed UnimplementedStoriesServer
// for forward compatibility
type StoriesServer interface {
	CreateStory(context.Context, *RequestCreateStory) (*ResponseCreateStory, error)
	EditStory(context.Context, *RequestEditStory) (*ResponseEditStory, error)
	DeleteStory(context.Context, *RequestDeleteStory) (*ResponseDeleteStory, error)
	GetStories(context.Context, *RequestGetStories) (*ResponseGetStories, error)
	GetStoryFullInfo(context.Context, *RequestGetStoryFullInfo) (*ResponseGetStoryFullInfo, error)
	mustEmbedUnimplementedStoriesServer()
}

// UnimplementedStoriesServer must be embedded to have forward compatible implementations.
type UnimplementedStoriesServer struct {
}

func (UnimplementedStoriesServer) CreateStory(context.Context, *RequestCreateStory) (*ResponseCreateStory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedStoriesServer) EditStory(context.Context, *RequestEditStory) (*ResponseEditStory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditStory not implemented")
}
func (UnimplementedStoriesServer) DeleteStory(context.Context, *RequestDeleteStory) (*ResponseDeleteStory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (UnimplementedStoriesServer) GetStories(context.Context, *RequestGetStories) (*ResponseGetStories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStories not implemented")
}
func (UnimplementedStoriesServer) GetStoryFullInfo(context.Context, *RequestGetStoryFullInfo) (*ResponseGetStoryFullInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryFullInfo not implemented")
}
func (UnimplementedStoriesServer) mustEmbedUnimplementedStoriesServer() {}

// UnsafeStoriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoriesServer will
// result in compilation errors.
type UnsafeStoriesServer interface {
	mustEmbedUnimplementedStoriesServer()
}

func RegisterStoriesServer(s grpc.ServiceRegistrar, srv StoriesServer) {
	s.RegisterService(&Stories_ServiceDesc, srv)
}

func _Stories_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateStory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stories.Stories/CreateStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServer).CreateStory(ctx, req.(*RequestCreateStory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stories_EditStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditStory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServer).EditStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stories.Stories/EditStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServer).EditStory(ctx, req.(*RequestEditStory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stories_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteStory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stories.Stories/DeleteStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServer).DeleteStory(ctx, req.(*RequestDeleteStory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stories_GetStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServer).GetStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stories.Stories/GetStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServer).GetStories(ctx, req.(*RequestGetStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stories_GetStoryFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetStoryFullInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesServer).GetStoryFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stories.Stories/GetStoryFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesServer).GetStoryFullInfo(ctx, req.(*RequestGetStoryFullInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Stories_ServiceDesc is the grpc.ServiceDesc for Stories service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stories_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stories.Stories",
	HandlerType: (*StoriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStory",
			Handler:    _Stories_CreateStory_Handler,
		},
		{
			MethodName: "EditStory",
			Handler:    _Stories_EditStory_Handler,
		},
		{
			MethodName: "DeleteStory",
			Handler:    _Stories_DeleteStory_Handler,
		},
		{
			MethodName: "GetStories",
			Handler:    _Stories_GetStories_Handler,
		},
		{
			MethodName: "GetStoryFullInfo",
			Handler:    _Stories_GetStoryFullInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stories.proto",
}
